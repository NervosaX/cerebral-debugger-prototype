{"version":3,"sources":["webpack:///main-3fcb833fca11be3d2550.min.js","webpack:///webpack/bootstrap 3fcb833fca11be3d2550","webpack:///./connector/extension.js","webpack:///./index.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","parentJsonpFunction","window","chunkIds","moreModules","chunkId","i","callbacks","length","installedChunks","push","apply","shift",1,"e","callback","undefined","head","document","getElementsByTagName","script","createElement","type","charset","async","src","p","appendChild","m","c",0,24,"Object","defineProperty","value","onChangeCallback","hasInitialized","isInitializing","initialMessages","currentVersion","currentAppId","currentInitCallback","connector","onChange","cb","forEach","sendEvent","eventName","payload","detail","JSON","stringify","chrome","devtools","inspectedWindow","eval","res","err","console","log","connect","initCallback","reset","port","extension","name","onMessage","addListener","message","parse","init","version","app",121,"_connector","resolve","querySelector","style","visibility","display","innerHTML","debug","render","showDebugger"],"mappings":"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","file":"main-3fcb833fca11be3d2550.min.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// install a JSONP callback for chunk loading\n/******/ \tvar parentJsonpFunction = window[\"webpackJsonp\"];\n/******/ \twindow[\"webpackJsonp\"] = function webpackJsonpCallback(chunkIds, moreModules) {\n/******/ \t\t// add \"moreModules\" to the modules object,\n/******/ \t\t// then flag all \"chunkIds\" as loaded and fire callback\n/******/ \t\tvar moduleId, chunkId, i = 0, callbacks = [];\n/******/ \t\tfor(;i < chunkIds.length; i++) {\n/******/ \t\t\tchunkId = chunkIds[i];\n/******/ \t\t\tif(installedChunks[chunkId])\n/******/ \t\t\t\tcallbacks.push.apply(callbacks, installedChunks[chunkId]);\n/******/ \t\t\tinstalledChunks[chunkId] = 0;\n/******/ \t\t}\n/******/ \t\tfor(moduleId in moreModules) {\n/******/ \t\t\tmodules[moduleId] = moreModules[moduleId];\n/******/ \t\t}\n/******/ \t\tif(parentJsonpFunction) parentJsonpFunction(chunkIds, moreModules);\n/******/ \t\twhile(callbacks.length)\n/******/ \t\t\tcallbacks.shift().call(null, __webpack_require__);\n/******/\n/******/ \t};\n/******/\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// object to store loaded and loading chunks\n/******/ \t// \"0\" means \"already loaded\"\n/******/ \t// Array means \"loading\", array contains callbacks\n/******/ \tvar installedChunks = {\n/******/ \t\t1:0\n/******/ \t};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/ \t// This file contains only the entry chunk.\n/******/ \t// The chunk loading function for additional chunks\n/******/ \t__webpack_require__.e = function requireEnsure(chunkId, callback) {\n/******/ \t\t// \"0\" is the signal for \"already loaded\"\n/******/ \t\tif(installedChunks[chunkId] === 0)\n/******/ \t\t\treturn callback.call(null, __webpack_require__);\n/******/\n/******/ \t\t// an array means \"currently loading\".\n/******/ \t\tif(installedChunks[chunkId] !== undefined) {\n/******/ \t\t\tinstalledChunks[chunkId].push(callback);\n/******/ \t\t} else {\n/******/ \t\t\t// start chunk loading\n/******/ \t\t\tinstalledChunks[chunkId] = [callback];\n/******/ \t\t\tvar head = document.getElementsByTagName('head')[0];\n/******/ \t\t\tvar script = document.createElement('script');\n/******/ \t\t\tscript.type = 'text/javascript';\n/******/ \t\t\tscript.charset = 'utf-8';\n/******/ \t\t\tscript.async = true;\n/******/\n/******/ \t\t\tscript.src = __webpack_require__.p + \"\" + chunkId + \".\" + ({}[chunkId]||chunkId) + \"-\" + \"3fcb833fca11be3d2550\" + \".min.js\";\n/******/ \t\t\thead.appendChild(script);\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 0:\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(121);\n\n\n/***/ },\n\n/***/ 24:\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\tvar onChangeCallback = undefined;\n\tvar hasInitialized = false;\n\tvar isInitializing = false;\n\tvar initialMessages = [];\n\tvar currentVersion = null;\n\tvar currentAppId = null;\n\tvar currentInitCallback = null;\n\t\n\tvar connector = {\n\t  onChange: function onChange(cb) {\n\t    onChangeCallback = cb;\n\t    initialMessages.forEach(cb);\n\t    hasInitialized = true;\n\t    isInitializing = false;\n\t  },\n\t  sendEvent: function sendEvent(eventName, payload) {\n\t    if (payload) {\n\t      var detail = {\n\t        detail: payload\n\t      };\n\t      var src = 'var event = new CustomEvent(\"cerebral.dev.' + eventName + '\", ' + JSON.stringify(detail) + ');window.dispatchEvent(event);';\n\t      chrome.devtools.inspectedWindow.eval(src, function (res, err) {\n\t        if (err) {\n\t          console.log(err);\n\t        }\n\t      });\n\t    } else {\n\t      var src = 'var event = new Event(\"cerebral.dev.' + eventName + '\");window.dispatchEvent(event);';\n\t      chrome.devtools.inspectedWindow.eval(src, function (res, err) {\n\t        if (err) {\n\t          console.log(err);\n\t        }\n\t      });\n\t    }\n\t  },\n\t  connect: function connect(initCallback, reset) {\n\t    currentInitCallback = initCallback;\n\t    var port = chrome.extension.connect({\n\t      name: \"Cerebral\"\n\t    });\n\t\n\t    // Listen to messages from the background page\n\t    port.onMessage.addListener(function (message) {\n\t      message = JSON.parse(message);\n\t      console.log('GOT MESSAGE', message);\n\t      var init = function init() {\n\t        initialMessages.push(message);\n\t\n\t        if (isInitializing) {\n\t          return;\n\t        }\n\t        isInitializing = true;\n\t        currentVersion = message.version || 'v1';\n\t        currentAppId = message.app;\n\t        currentInitCallback(currentVersion);\n\t      };\n\t\n\t      if (hasInitialized) {\n\t        console.log(message, currentAppId);\n\t        if ('app' in message && currentAppId !== message.app) {\n\t          reset(message.type === 'init'); // Show debugger if init event\n\t          if (message.type === 'init') {\n\t            currentAppId = message.type === 'init' ? message.app : currentAppId;\n\t            onChangeCallback(message);\n\t          }\n\t        } else {\n\t          onChangeCallback(message);\n\t        }\n\t      } else {\n\t        init();\n\t      }\n\t    });\n\t  }\n\t};\n\t\n\texports['default'] = connector;\n\tmodule.exports = exports['default'];\n\n/***/ },\n\n/***/ 121:\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _connector = __webpack_require__(24);\n\t\n\t(0, _connector.connect)(function (version) {\n\t  version = version || 'v1';\n\t  __webpack_require__.e/* nsure */(0, function () {\n\t    try {\n\t      /*require.resolve*/(__webpack_require__(119).resolve(\"./\" + version + '/index.js'));\n\t    } catch (e) {\n\t      document.querySelector('#root').style.visibility = 'hidden';\n\t      document.querySelector('#error').style.display = 'block';\n\t      document.querySelector('#error').innerHTML = '<h1>Version ' + version + ' is required by current Cerebral version, please update Debugger in Chrome Store</h1><img src=\"http://www.cerebraljs.com/logo.png\" width=\"200\"/>';\n\t      return;\n\t    }\n\t\n\t    var debug = __webpack_require__(119)(\"./\" + version + '/index.js');\n\t    document.querySelector('#root').style.visibility = 'visible';\n\t    document.querySelector('#error').style.display = 'none';\n\t    debug.render();\n\t  });\n\t}, function (showDebugger) {\n\t  if (showDebugger) {\n\t    document.querySelector('#root').style.visibility = 'visible';\n\t    document.querySelector('#error').style.display = 'none';\n\t  } else {\n\t    document.querySelector('#root').style.visibility = 'hidden';\n\t    document.querySelector('#error').style.display = 'block';\n\t    document.querySelector('#error').innerHTML = '<h1>You changed to a different APP, please refresh the app to continue...</h1><img src=\"http://www.cerebraljs.com/logo.png\" width=\"200\"/>';\n\t  }\n\t});\n\n/***/ }\n\n/******/ });\n\n\n/** WEBPACK FOOTER **\n ** main-3fcb833fca11be3d2550.min.js\n **/"," \t// install a JSONP callback for chunk loading\n \tvar parentJsonpFunction = window[\"webpackJsonp\"];\n \twindow[\"webpackJsonp\"] = function webpackJsonpCallback(chunkIds, moreModules) {\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, callbacks = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId])\n \t\t\t\tcallbacks.push.apply(callbacks, installedChunks[chunkId]);\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(chunkIds, moreModules);\n \t\twhile(callbacks.length)\n \t\t\tcallbacks.shift().call(null, __webpack_require__);\n\n \t};\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// \"0\" means \"already loaded\"\n \t// Array means \"loading\", array contains callbacks\n \tvar installedChunks = {\n \t\t1:0\n \t};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n \t// This file contains only the entry chunk.\n \t// The chunk loading function for additional chunks\n \t__webpack_require__.e = function requireEnsure(chunkId, callback) {\n \t\t// \"0\" is the signal for \"already loaded\"\n \t\tif(installedChunks[chunkId] === 0)\n \t\t\treturn callback.call(null, __webpack_require__);\n\n \t\t// an array means \"currently loading\".\n \t\tif(installedChunks[chunkId] !== undefined) {\n \t\t\tinstalledChunks[chunkId].push(callback);\n \t\t} else {\n \t\t\t// start chunk loading\n \t\t\tinstalledChunks[chunkId] = [callback];\n \t\t\tvar head = document.getElementsByTagName('head')[0];\n \t\t\tvar script = document.createElement('script');\n \t\t\tscript.type = 'text/javascript';\n \t\t\tscript.charset = 'utf-8';\n \t\t\tscript.async = true;\n\n \t\t\tscript.src = __webpack_require__.p + \"\" + chunkId + \".\" + ({}[chunkId]||chunkId) + \"-\" + \"3fcb833fca11be3d2550\" + \".min.js\";\n \t\t\thead.appendChild(script);\n \t\t}\n \t};\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 3fcb833fca11be3d2550\n **/","let onChangeCallback;\nlet hasInitialized = false;\nlet isInitializing = false;\nlet initialMessages = [];\nlet currentVersion = null;\nlet currentAppId = null;\nlet currentInitCallback = null;\n\nconst connector = {\n  onChange(cb) {\n    onChangeCallback = cb;\n    initialMessages.forEach(cb);\n    hasInitialized = true;\n    isInitializing = false;\n  },\n  sendEvent(eventName, payload) {\n    if (payload) {\n      var detail = {\n        detail: payload\n      };\n      var src = 'var event = new CustomEvent(\"cerebral.dev.' + eventName + '\", ' + JSON.stringify(detail) + ');window.dispatchEvent(event);';\n      chrome.devtools.inspectedWindow.eval(src, function(res, err) {\n        if (err) {\n          console.log(err);\n        }\n      });\n    } else {\n      var src = 'var event = new Event(\"cerebral.dev.' + eventName + '\");window.dispatchEvent(event);';\n      chrome.devtools.inspectedWindow.eval(src, function(res, err) {\n        if (err) {\n          console.log(err);\n        }\n      });\n    }\n  },\n  connect(initCallback, reset) {\n    currentInitCallback = initCallback;\n    const port = chrome.extension.connect({\n        name: \"Cerebral\"\n    });\n\n    // Listen to messages from the background page\n    port.onMessage.addListener((message) => {\n      message = JSON.parse(message);\n      console.log('GOT MESSAGE', message);\n      var init = function () {\n        initialMessages.push(message);\n\n        if (isInitializing) {\n          return;\n        }\n        isInitializing = true;\n        currentVersion = message.version || 'v1';\n        currentAppId = message.app;\n        currentInitCallback(currentVersion);\n      };\n\n      if (hasInitialized) {\n        console.log(message, currentAppId);\n        if ('app' in message && currentAppId !== message.app) {\n          reset(message.type === 'init'); // Show debugger if init event\n          if (message.type === 'init') {\n            currentAppId = message.type === 'init' ? message.app : currentAppId;\n            onChangeCallback(message);\n          }\n        } else {\n          onChangeCallback(message);\n        }\n\n      } else {\n        init();\n      }\n    });\n\n  }\n};\n\nexport default connector;\n\n\n\n/** WEBPACK FOOTER **\n ** ./connector/extension.js\n **/","import {connect} from 'connector';\n\nconnect((version) => {\n  version = version || 'v1';\n  require.ensure([], function () {\n    try {\n      require.resolve('./versions/' + version + '/index.js');\n    } catch (e) {\n      document.querySelector('#root').style.visibility = 'hidden';\n      document.querySelector('#error').style.display = 'block';\n      document.querySelector('#error').innerHTML = '<h1>Version ' + version + ' is required by current Cerebral version, please update Debugger in Chrome Store</h1><img src=\"http://www.cerebraljs.com/logo.png\" width=\"200\"/>';\n      return;\n    }\n\n    var debug = require('./versions/' + version + '/index.js');\n    document.querySelector('#root').style.visibility = 'visible';\n    document.querySelector('#error').style.display = 'none';\n    debug.render();\n\n  });\n}, (showDebugger) => {\n  if (showDebugger) {\n    document.querySelector('#root').style.visibility = 'visible';\n    document.querySelector('#error').style.display = 'none';\n  } else {\n    document.querySelector('#root').style.visibility = 'hidden';\n    document.querySelector('#error').style.display = 'block';\n    document.querySelector('#error').innerHTML = '<h1>You changed to a different APP, please refresh the app to continue...</h1><img src=\"http://www.cerebraljs.com/logo.png\" width=\"200\"/>';\n  }\n});\n\n\n\n/** WEBPACK FOOTER **\n ** ./index.js\n **/"],"sourceRoot":""}